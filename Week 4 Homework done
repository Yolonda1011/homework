ython Homework (Flow Control, Modules, Functions, Exceptions, NumPy) 

**Note**: You can create a Python file or a Jupyter Notebook file

<br> 

**<ins>Use markdown formatting for the following questions (e.g., bold lettering, bullet points, different font sizes, etc.)</ins>**:

1. What does one need to do to use a module?
Import the respective module
1. Name a Module (not the DateTime Nodule) we looked at and write a line or 2 of code as an example using this module.
_init_.py

1. What is a benefit of using Exception handling?
When the error is raised in the try block, the except block will be executed, if not in place then the progra will crash.
1. what are the 4 components used for Python Exception Handling?
they are TRY, EXCEPT, ELSE, and FINALLY
1. NumPy arrays are like what Python data type?
cientific computing packages
1. What is one of the main benefits of using NumPy arrays.
Once imorted or initiated the calculations are standard information
1. What is one of the main requirements about the 'dtype' of NumPy arrays?
Arrays can handle very large datasets efficiently. Computationally-memory efficient. Faster calculations and analysis than lists
1. Of the 10 uses of NumPy, name 2.
saves memory ,more convenient

1. Name one of the other libraries we'll use with NumPy?
axes
1. What is the shape of NumPy arrays?
3d
1. What is a Tensor?
multi demensional array
1. Name a reason why it's better using  NumPy for Data Analysis than using a Python List?
saves memory and time 
1. When creating an "empty" array, where do the elements come from?
initializing an empy list using (*) operator
<br>

#### Flow Control Methods:

1. Create an if statement: if 'age' is greater than or equal to 25, print "Renting a car is more affordable", however if 'age' is less than 25, print "Renting a car is very expensive."

a = 25
b = 43
if b > a:

print("Renting a care is more affordable")
    however if a < b:
    print("Renting a car is very expensive")


2. Create and chain an if-else  statement: if 'age' is greater than or equal to 25, print "Renting a car is more affordable." If 'age' is less than 25 but greater than or equal to 18, print "Renting a car is very expensive." Finally, if age is less than 18, print "You cannot legally rent a car."

if age 
3. Loop over the following string to (1) count all the characters in the string and (2) print out all the vowels -- "The quick brown fox jumps over the lazy dog"
vowels = 'aeiouAEIOU'
sentence = "The quick brown fox jumps over the lazy dog"
for letters in sentence:
    if letters in vowels:
    
        char_count += 1
print(char_count)

4. Write a nested loop that prints out every piece of clothing from the `couture` list, in every fashionable color from the `panettone` set: couture = ["trousers", "blouse", "bandana", "cumber band", "blazer", "vest", "french beret", "scarf", "stole"] and panettone = {"cerise", "fuchsia", "aqua", "maple", "auburn", "burnt sienna", "gunmetal blue", "Dark Sapphire"}

5. Use range as a loop to calculate the sum of all the numbers from 1 to 100

6. Print the second item in this fruits list.
    ["apple", "banana", "cherry"]

7. Change the value from "apple" to "kiwi", in the fruits list.
    ["apple", "banana", "cherry"]

8. Use the append method to add "orange" to the fruits list.
    ["apple", "banana", "cherry"]

9. Use the insert method to add "lemon" as the second item in the fruits list.
    ["apple", "banana", "cherry"]

10. Use the remove method to remove "banana" from the fruits list.
    ["apple", "banana", "cherry"]

11. Use negative indexing to print the 3rd and 2nd to last items in the list.
    ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]

12. Use a range of indexes to print the third, fourth, and fifth item in the list.
    ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]

13. Use the correct syntax to print the number of items in the list.
    ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]

14. Use the correct syntax to sort this list in reverse order
    ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]

<br>


**<ins>Use a Python code file for this section</ins>**:

15. Use the DateTime module to get Current Date and Time, and save it to a variable. Then extract just the Full month name form that variable.

16. Write a simple function that takes 2 parameters -- a  first name and a day name.
    - Set a default value for the day name of Sunday.
    - Have the function print out a greeting -- using the parameters -- that says something like "Hi first-name! Happy day-name!". Remember to use the variables in the greeting to replace first-name and day-name.  
    - Invoke this function with 2 variables.
    - Invoke this function with 1 variable only.

17. Write a block of code to handle one of the most common Python exception errors. Select one of the common errors from the curriculum section on Python Exception handling. Have your code example uses the `try`,`except`, `else`, and `finally` components.

<br>

#### When done with homework:
- **Due Date**: The following Monday before class
- Make sure your homework file is well named
- Add the homework to your Homework repo
- Use  `git add .`, `git commit -m "message"`, and `git push` to upload your homework changes to GitHub in the cloud
- Create a JIRA ticket to indicate that your Homework is ready for review:
    - <ins> In the "Summary" box</ins>: Include First Name and Last Initial, plus a short description in the Summary box (Ex: Jane D. Week # Homework Complete)
    - <ins> In the "Description" box</ins>: Include GitHub repo url 

<br>

------------------------------------------------------------------------------------

<br>

#### Final Note: 
**<ins>Goal from this past week</ins>**: 
- Become familiar with Python Flow Control:
        - comparison vs. logical operators
        - if, else, elif
        - loops
- Understanding and knowing the difference between Python Modules, Libraries and Functions
- Learn about Python Exception Handling: try, except, else
- Python Arrays
- Intro to Numpy